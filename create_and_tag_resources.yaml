# Copyright (c) 2024 Thomas Vincent
# SPDX-License-Identifier: MIT

description: Creates AWS resources and applies consistent tagging
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  ResourceType:
    type: String
    description: (Required) Type of AWS resource to create (e.g., EC2, S3, RDS).
    allowedValues:
      - S3
      - EC2
      - RDS
  ResourceName:
    type: String
    description: (Required) Name to give the created resource.
  ResourceParameters:
    type: StringMap
    description: (Required) JSON object containing parameters specific to the resource type.
  Environment:
    type: String
    description: (Required) Environment this resource belongs to.
    allowedValues:
      - Development
      - Testing
      - Staging
      - Production
  Department:
    type: String
    description: (Required) Department this resource belongs to.
  Project:
    type: String
    description: (Required) Project this resource belongs to.
  Owner:
    type: String
    description: (Required) Owner of this resource (typically an email address).
  CostCenter:
    type: String
    description: (Required) Cost center for billing this resource.
  AdditionalTags:
    type: StringMap
    description: (Optional) Additional tags to apply to the resource.
    default: {}
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ""
mainSteps:
  - name: CreateResource
    action: aws:executeScript
    onFailure: Abort
    inputs:
      Runtime: python3.8
      Handler: create_resource
      Script: |-
        import boto3
        import json
        import time
        
        def create_resource(events, context):
            """
            Creates an AWS resource based on the specified resource type and parameters.
            
            Args:
                events (dict): Input parameters
                context: Lambda context (not used)
                
            Returns:
                dict: Created resource details
            """
            resource_type = events['ResourceType']
            resource_name = events['ResourceName']
            resource_params = events['ResourceParameters']
            
            # Define standard tags
            standard_tags = [
                {'Key': 'Name', 'Value': resource_name},
                {'Key': 'Environment', 'Value': events['Environment']},
                {'Key': 'Department', 'Value': events['Department']},
                {'Key': 'Project', 'Value': events['Project']},
                {'Key': 'Owner', 'Value': events['Owner']},
                {'Key': 'CostCenter', 'Value': events['CostCenter']},
                {'Key': 'CreatedBy', 'Value': 'SSM-Automation'},
                {'Key': 'CreatedDate', 'Value': time.strftime('%Y-%m-%d')}
            ]
            
            # Add additional tags
            for key, value in events['AdditionalTags'].items():
                standard_tags.append({'Key': key, 'Value': value})
            
            result = {}
            
            if resource_type == 'S3':
                return create_s3_bucket(resource_name, resource_params, standard_tags)
            elif resource_type == 'EC2':
                return create_ec2_instance(resource_name, resource_params, standard_tags)
            elif resource_type == 'RDS':
                return create_rds_instance(resource_name, resource_params, standard_tags)
            else:
                raise ValueError(f"Unsupported resource type: {resource_type}")
        
        def create_s3_bucket(bucket_name, params, tags):
            """Create and tag an S3 bucket"""
            s3 = boto3.client('s3')
            region = params.get('Region', 'us-east-1')
            
            # Create the bucket
            if region == 'us-east-1':
                response = s3.create_bucket(Bucket=bucket_name)
            else:
                response = s3.create_bucket(
                    Bucket=bucket_name,
                    CreateBucketConfiguration={'LocationConstraint': region}
                )
            
            # Convert tags to S3 format
            s3_tags = {'TagSet': tags}
            
            # Apply tags
            s3.put_bucket_tagging(
                Bucket=bucket_name,
                Tagging=s3_tags
            )
            
            # Apply versioning if specified
            if params.get('EnableVersioning', False):
                s3.put_bucket_versioning(
                    Bucket=bucket_name,
                    VersioningConfiguration={'Status': 'Enabled'}
                )
            
            return {
                'ResourceType': 'S3',
                'ResourceId': bucket_name,
                'ResourceArn': f"arn:aws:s3:::{bucket_name}",
                'Region': region,
                'Details': {
                    'BucketName': bucket_name,
                    'CreationDate': response.get('CreationDate', '').isoformat() if hasattr(response.get('CreationDate', ''), 'isoformat') else str(response.get('CreationDate', ''))
                }
            }
        
        def create_ec2_instance(instance_name, params, tags):
            """Create and tag an EC2 instance"""
            ec2 = boto3.client('ec2')
            
            # Extract required parameters
            ami_id = params.get('AmiId')
            instance_type = params.get('InstanceType', 't2.micro')
            subnet_id = params.get('SubnetId')
            security_group_ids = params.get('SecurityGroupIds', [])
            
            if not ami_id or not subnet_id:
                raise ValueError("AmiId and SubnetId are required parameters for EC2 instances")
            
            # Launch the instance
            response = ec2.run_instances(
                ImageId=ami_id,
                InstanceType=instance_type,
                MinCount=1,
                MaxCount=1,
                SubnetId=subnet_id,
                SecurityGroupIds=security_group_ids if security_group_ids else None,
                TagSpecifications=[
                    {
                        'ResourceType': 'instance',
                        'Tags': tags
                    }
                ]
            )
            
            instance_id = response['Instances'][0]['InstanceId']
            
            # Wait for the instance to be running
            waiter = ec2.get_waiter('instance_running')
            waiter.wait(InstanceIds=[instance_id])
            
            # Get instance details
            instance_info = ec2.describe_instances(InstanceIds=[instance_id])
            instance = instance_info['Reservations'][0]['Instances'][0]
            
            return {
                'ResourceType': 'EC2',
                'ResourceId': instance_id,
                'ResourceArn': f"arn:aws:ec2:{instance['Placement']['AvailabilityZone'][:-1]}:{boto3.client('sts').get_caller_identity()['Account']}:instance/{instance_id}",
                'Region': instance['Placement']['AvailabilityZone'][:-1],
                'Details': {
                    'InstanceId': instance_id,
                    'InstanceType': instance['InstanceType'],
                    'State': instance['State']['Name'],
                    'PrivateIpAddress': instance.get('PrivateIpAddress', ''),
                    'PublicIpAddress': instance.get('PublicIpAddress', '')
                }
            }
        
        def create_rds_instance(db_name, params, tags):
            """Create and tag an RDS instance"""
            rds = boto3.client('rds')
            
            # Extract required parameters
            db_instance_identifier = db_name.lower().replace(' ', '-')
            db_instance_class = params.get('DBInstanceClass', 'db.t3.micro')
            engine = params.get('Engine', 'mysql')
            allocated_storage = int(params.get('AllocatedStorage', 20))
            master_username = params.get('MasterUsername', 'admin')
            master_password = params.get('MasterPassword')
            vpc_security_group_ids = params.get('VpcSecurityGroupIds', [])
            db_subnet_group_name = params.get('DBSubnetGroupName')
            
            if not master_password or not db_subnet_group_name:
                raise ValueError("MasterPassword and DBSubnetGroupName are required parameters for RDS instances")
            
            # Convert tags to RDS format
            rds_tags = []
            for tag in tags:
                rds_tags.append({
                    'Key': tag['Key'],
                    'Value': tag['Value']
                })
            
            # Create the RDS instance
            response = rds.create_db_instance(
                DBInstanceIdentifier=db_instance_identifier,
                AllocatedStorage=allocated_storage,
                DBInstanceClass=db_instance_class,
                Engine=engine,
                MasterUsername=master_username,
                MasterUserPassword=master_password,
                VpcSecurityGroupIds=vpc_security_group_ids,
                DBSubnetGroupName=db_subnet_group_name,
                Tags=rds_tags
            )
            
            db_instance = response['DBInstance']
            
            return {
                'ResourceType': 'RDS',
                'ResourceId': db_instance_identifier,
                'ResourceArn': db_instance['DBInstanceArn'],
                'Region': db_instance['AvailabilityZone'][:-1],
                'Details': {
                    'DBInstanceIdentifier': db_instance_identifier,
                    'DBInstanceClass': db_instance['DBInstanceClass'],
                    'Engine': db_instance['Engine'],
                    'DBInstanceStatus': db_instance['DBInstanceStatus'],
                    'Endpoint': db_instance.get('Endpoint', {}).get('Address', '') if 'Endpoint' in db_instance else ''
                }
            }
      InputPayload:
        ResourceType: '{{ ResourceType }}'
        ResourceName: '{{ ResourceName }}'
        ResourceParameters: '{{ ResourceParameters }}'
        Environment: '{{ Environment }}'
        Department: '{{ Department }}'
        Project: '{{ Project }}'
        Owner: '{{ Owner }}'
        CostCenter: '{{ CostCenter }}'
        AdditionalTags: '{{ AdditionalTags }}'
    outputs:
      - Name: ResourceType
        Selector: $.Payload.ResourceType
        Type: String
      - Name: ResourceId
        Selector: $.Payload.ResourceId
        Type: String
      - Name: ResourceArn
        Selector: $.Payload.ResourceArn
        Type: String
      - Name: Region
        Selector: $.Payload.Region
        Type: String
      - Name: Details
        Selector: $.Payload.Details
        Type: StringMap
    isEnd: true