# Copyright (c) 2024 Thomas Vincent
# SPDX-License-Identifier: MIT

description: Attach policies to an IAM role
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  RoleName:
    type: String
    description: (Required) The name of the IAM role to attach policies to.
  AWSManagedPolicies:
    type: StringList
    description: (Optional) A list of AWS managed policies to attach to the role.
    default: []
  CustomerManagedPolicies:
    type: StringList
    description: (Optional) A list of customer managed policies to attach to the role.
    minItems: 0
    default: []
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ""
mainSteps:
- name: attachPolicies
  action: 'aws:executeScript'
  inputs:
    Runtime: python3.8
    Handler: script_handler
    Script: |-
      import boto3
      from botocore.exceptions import ClientError
      
      def script_handler(events, context):
          """
          Attaches AWS managed and customer managed policies to an IAM role.
          
          Args:
              events (dict): Input parameters including RoleName, AWSManagedPolicies, and CustomerManagedPolicies
              context: Lambda context (not used)
              
          Returns:
              dict: Results of the operation including success/failure status
          """
          iam = boto3.client("iam")
          role_name = events["RoleName"]
          aws_policy_names = events["AWSManagedPolicies"]
          customer_policy_names = events["CustomerManagedPolicies"]
          
          results = {
              "RoleName": role_name,
              "AttachedPolicies": [],
              "FailedPolicies": []
          }
          
          # Attach AWS managed policies
          for policy in aws_policy_names:
              try:
                  policy_arn = f"arn:aws:iam::aws:policy/{policy}"
                  iam.attach_role_policy(RoleName=role_name, PolicyArn=policy_arn)
                  results["AttachedPolicies"].append({"Name": policy, "Type": "AWS", "Arn": policy_arn})
              except ClientError as e:
                  results["FailedPolicies"].append({
                      "Name": policy, 
                      "Type": "AWS", 
                      "Error": str(e)
                  })
          
          # Attach customer managed policies
          for policy_arn in customer_policy_names:
              try:
                  iam.attach_role_policy(RoleName=role_name, PolicyArn=policy_arn)
                  policy_name = policy_arn.split("/")[-1]
                  results["AttachedPolicies"].append({"Name": policy_name, "Type": "Customer", "Arn": policy_arn})
              except ClientError as e:
                  results["FailedPolicies"].append({
                      "Name": policy_arn, 
                      "Type": "Customer", 
                      "Error": str(e)
                  })
          
          return results
    InputPayload:
      RoleName: '{{ RoleName }}'
      AWSManagedPolicies: '{{ AWSManagedPolicies }}'
      CustomerManagedPolicies: '{{ CustomerManagedPolicies }}'
  outputs:
    - Name: AttachedPolicies
      Selector: $.Payload.AttachedPolicies
      Type: StringList
    - Name: FailedPolicies
      Selector: $.Payload.FailedPolicies
      Type: StringList